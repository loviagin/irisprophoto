import { NextResponse } from "next/server";

// –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ Firestore
async function updateOrderStatus(orderId: string, newStatus: string): Promise<void> {
    console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ${orderId} –Ω–æ–≤—ã–º —Å—Ç–∞—Ç—É—Å–æ–º: ${newStatus}`);
    // –ó–¥–µ—Å—å —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ Firestore, –Ω–∞–ø—Ä–∏–º–µ—Ä:
    // const db = getFirestore();
    // const orderRef = doc(db, "orders", orderId);
    // await updateDoc(orderRef, { status: newStatus });
}

export async function POST(req: Request) {
    try {
        const update = await req.json();
        const TOKEN = process.env.NEXT_PUBLIC_TELEGRAM_BOT_TOKEN;
        if (!TOKEN) throw new Error("Telegram bot token is not provided.");

        if (update.callback_query) {
            const chatId = update.callback_query.message.chat.id;
            const messageId = update.callback_query.message.message_id;
            const callbackData: string = update.callback_query.data;
            const callbackQueryId = update.callback_query.id;

            // –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞" ‚Äì –≤—ã–≤–æ–¥–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Å—Ç–∞—Ç—É—Å–∞
            if (callbackData === "open_status") {
                const newKeyboard = {
                    inline_keyboard: [
                        [
                            { text: "–ù–æ–≤—ã–π", callback_data: "status_new" },
                            { text: "–í —Ä–∞–±–æ—Ç–µ", callback_data: "status_in_progress" }
                        ],
                        [
                            { text: "–ó–∞–≤–µ—Ä—à—ë–Ω", callback_data: "status_completed" },
                            { text: "–û—Ç–º–µ–Ω—ë–Ω", callback_data: "status_cancelled" }
                        ]
                    ]
                };

                const editMessageUrl = `https://api.telegram.org/bot${TOKEN}/editMessageReplyMarkup`;
                await fetch(editMessageUrl, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: newKeyboard
                    }),
                });

                const answerUrl = `https://api.telegram.org/bot${TOKEN}/answerCallbackQuery`;
                await fetch(answerUrl, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ callback_query_id: callbackQueryId }),
                });
            }
            // –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, "status_new", "status_in_progress", –∏ —Ç.–¥.)
            else if (callbackData.startsWith("status_")) {
                // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏, —É–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
                const newStatusStr = callbackData.replace("status_", "").toUpperCase();

                // –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                const oldText: string = update.callback_query.message.text || "";
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å, –≥–¥–µ —É–∫–∞–∑–∞–Ω —Å—Ç–∞—Ç—É—Å.
                // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –∏–º–µ–µ—Ç –≤–∏–¥:
                // "üë§ *Order status:* <OLD_STATUS>"
                const newText = oldText.replace(
                    /(üë§ \*Order status:\*\s*)[^\n]*/,
                    `$1${newStatusStr}`
                );

                // –ò—Å–ø–æ–ª—å–∑—É–µ–º messageId –∫–∞–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞ (–∏–ª–∏ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ª–æ–≥–∏–∫–∏)
                const orderId = String(messageId);

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ Firestore
                await updateOrderStatus(orderId, newStatusStr);

                // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, —á—Ç–æ–±—ã –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
                const newKeyboard = {
                    inline_keyboard: [
                        [
                            { text: "–ù–æ–≤—ã–π", callback_data: "status_new" },
                            { text: "–í —Ä–∞–±–æ—Ç–µ", callback_data: "status_in_progress" }
                        ],
                        [
                            { text: "–ó–∞–≤–µ—Ä—à—ë–Ω", callback_data: "status_completed" },
                            { text: "–û—Ç–º–µ–Ω—ë–Ω", callback_data: "status_cancelled" }
                        ]
                    ]
                };

                // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                const editMessageTextUrl = `https://api.telegram.org/bot${TOKEN}/editMessageText`;
                await fetch(editMessageTextUrl, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        chat_id: chatId,
                        message_id: messageId,
                        text: newText,
                        parse_mode: "Markdown",
                        reply_markup: newKeyboard // –ü–µ—Ä–µ–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ–±—ã –æ–Ω–∞ –æ—Å—Ç–∞–ª–∞—Å—å
                    }),
                });

                // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Telegram
                const answerUrl = `https://api.telegram.org/bot${TOKEN}/answerCallbackQuery`;
                await fetch(answerUrl, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ callback_query_id: callbackQueryId }),
                });
            }
        }

        return NextResponse.json({ success: true });
    } catch (error) {
        console.error("Error in Telegram Webhook:", error);
        return NextResponse.json(
            { success: false, error: (error as Error).message },
            { status: 500 }
        );
    }
}