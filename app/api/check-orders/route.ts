import { NextResponse, NextRequest } from 'next/server'
import { Client } from '@notionhq/client'
import { connectToDatabase } from '@/lib/db'
import Device from '@/models/Device'
import { sendApnPush } from '@/lib/apnSender'
import jwt from 'jsonwebtoken'
import OrderRecord from '@/models/OrderRecord'

const notion = new Client({ auth: process.env.NOTION_API_KEY })
const databaseId = process.env.NOTION_DATABASE_ID!
const JWT_SECRET = process.env.JWT_SECRET!

function verifyToken(req: NextRequest): boolean {
    const authHeader = req.headers.get('authorization')
    if (!authHeader || !authHeader.startsWith('Bearer ')) return false

    const token = authHeader.split(' ')[1]
    try {
        jwt.verify(token, JWT_SECRET)
        return true
    } catch {
        return false
    }
}

export async function GET(req: NextRequest) {
    if (!verifyToken(req)) {
        return NextResponse.json({ success: false, error: 'Unauthorized' }, { status: 401 })
    }

    try {
        await connectToDatabase()

        const notionResponse = await notion.databases.query({
            database_id: databaseId,
            sorts: [{ property: 'Date', direction: 'descending' }]
        })

        const newOrders: string[] = []

        for (const result of notionResponse.results) {
            const orderId = result.id

            const alreadyExists = await OrderRecord.exists({ id: orderId })
            if (!alreadyExists) {
                newOrders.push(orderId)
                await OrderRecord.create({ id: orderId })
            }
        }

        if (newOrders.length > 0) {
            console.log('üì¢ –ù–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã:', newOrders)

            const tokens: string[] = await Device.find().distinct('token')
            for (const token of tokens) {
                await sendApnPush(token, 'üì∑ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!', '–ü—Ä–æ–≤–µ—Ä—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏', "")
            }
        }

        return NextResponse.json({ success: true, newOrders })
    } catch (error: any) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤:', error)
        return NextResponse.json({ success: false, error: error.message }, { status: 500 })
    }
}

export async function POST(req: NextRequest) {
    if (!verifyToken(req)) {
        return NextResponse.json({ success: false, error: 'Unauthorized' }, { status: 401 })
    }

    try {
        // await connectToDatabase()

        // –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        const today = new Date()
        const todayString = today.toISOString().split('T')[0]

        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        const notionResponse = await notion.databases.query({
            database_id: databaseId,
            filter: {
                property: 'Date',
                date: {
                    equals: todayString
                }
            }
        })

        const todaysOrders = notionResponse.results
        const orderCount = todaysOrders.length

        if (orderCount > 0) {
            console.log(`üìÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (${todayString}):`, orderCount)

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            // const devices = await Device.find()
            
            // if (devices.length > 0) {
            //     // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            //     for (const device of devices) {
            //         await sendApnPush(
            //             device.token, 
            //             `üìÖ –ó–∞–∫–∞–∑—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è`, 
            //             `–£ –≤–∞—Å ${orderCount} –∑–∞–∫–∞–∑(–æ–≤) –Ω–∞ —Å–µ–≥–æ–¥–Ω—è`, 
            //             "today-orders"
            //         )
            //     }
                
            //     console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ ${devices.length} —É—Å—Ç—Ä–æ–π—Å—Ç–≤`)
            // } else {
            //     console.log('‚ö†Ô∏è –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')
            // }
        } else {
            console.log(`üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è (${todayString}) –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç`)
        }

        return NextResponse.json({ 
            success: true, 
            todaysOrders: orderCount,
            date: todayString
        })
    } catch (error: any) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:', error)
        return NextResponse.json({ success: false, error: error.message }, { status: 500 })
    }
}
