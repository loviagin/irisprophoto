import { NextResponse } from 'next/server'
import { Client } from '@notionhq/client'
import { connectToDatabase } from '@/lib/db'
import Device from '@/models/Device'
import Meta from '@/models/Meta'
import { sendApnPush } from '@/lib/apnSender'

const notion = new Client({ auth: process.env.NOTION_API_KEY })
const databaseId = process.env.NOTION_DATABASE_ID!

export async function GET() {
  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
    await connectToDatabase()

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ ID –∏–∑ –ë–î
    const meta = await Meta.findById('last_order_id')
    const savedLastId = meta?.value || null

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∞–º–æ–≥–æ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –∏–∑ Notion
    const response = await notion.databases.query({
      database_id: databaseId,
      sorts: [{ property: 'Date', direction: 'descending' }],
      page_size: 1,
    })

    const first = response.results[0]
    if (!first) {
      return NextResponse.json({ success: true, message: 'No entries found' })
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–æ–≤—ã–π –ª–∏ —ç—Ç–æ –∑–∞–∫–∞–∑
    if (first.id !== savedLastId) {
      if (savedLastId !== null) {
        console.log('üì¢ –ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ Notion:', first.id)

        const tokens: string[] = await Device.find().distinct('token')
        console.log(`üì¨ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ ${tokens.length} —É—Å—Ç—Ä–æ–π—Å—Ç–≤`)

        for (const token of tokens) {
          await sendApnPush(token, '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!', '–û—Ç–∫—Ä–æ–π –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏')
        }
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
      await Meta.findByIdAndUpdate(
        'last_order_id',
        { value: first.id },
        { upsert: true }
      )
    }

    return NextResponse.json({ success: true, lastId: first.id })
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
    return NextResponse.json({ success: false, error: error.message }, { status: 500 })
  }
}