import apn from 'apn'
import fs from 'fs'
import path from 'path'
import { connectToDatabase } from './db'
import Device from '@/models/Device'

// –ü—É—Ç—å –∫ .p8 –∫–ª—é—á—É
const keyPath = path.resolve('./AuthKey_5SA8A55MT8.p8')

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ APNs
const apnProvider = new apn.Provider({
  token: {
    key: fs.readFileSync(keyPath),
    keyId: process.env.APN_KEY_ID!,
    teamId: process.env.APN_TEAM_ID!,
  },
  production: false, // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ false –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
})

export async function sendApnPush(deviceToken: string, title: string, body: string, orderId: string) {
  const notification = new apn.Notification()

  notification.topic = process.env.APN_BUNDLE_ID! // Bundle ID –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  notification.alert = { title, body }
  notification.sound = 'default'
  
  // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞–∫ –≤ OneSignal –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å onOpenURL
  notification.payload = {
    aps: {
      alert: {
        title: title,
        body: body
      },
      sound: 'default'
    },
    data: {
      orderId: orderId,
      deepLink: `irisproadmin://open=${orderId}`,
      testData: "test_value",
      timestamp: new Date().toISOString()
    }
  }

  console.log('üîß APN –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', {
    bundleId: process.env.APN_BUNDLE_ID,
    keyId: process.env.APN_KEY_ID,
    teamId: process.env.APN_TEAM_ID,
    production: false,
    payload: notification.payload
  });

  try {
    const result = await apnProvider.send(notification, deviceToken)
    console.log('‚úÖ APNs –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', result.sent.length, 'üì¶ –û—à–∏–±–æ–∫:', result.failed.length)

    if (result.failed.length > 0) {
      console.warn('‚ùå –û—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏:', JSON.stringify(result.failed, null, 2))
      await connectToDatabase();
      for (const fail of result.failed) {
        // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª—è
        console.log(fail)
        const token =
          fail.device ||
          fail['device'] 
        if (token) {
          await Device.deleteOne({ token });
          console.log(`–£–¥–∞–ª—ë–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: ${token}`);
        } else {
          console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–æ–∫–µ–Ω —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', fail);
        }
      }
    }
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ APNs:', err)
  }
}